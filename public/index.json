[{"authors":["sarah"],"categories":null,"content":"I am an MPH candidate in Epidemiology and Biostatistics at Washington University in St. Louis with a background in Neuroscience and Genetics. I have experience in both psychiatric and chronic disease epidemiology, with particular emphases on eating disorders, diabetes, and comorbidity. I'm currently interested in the application of machine learning and big data to epidemiologic problems, as well as the development of new causal inference methods for big data. When I'm not in the lab or fiddling around in R, you can find me playing Settlers of Catan, running, cycling, or perfecting the art of latte making. Thanks for stopping by!\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"768c1ce2ae46f57a00b98b3896c3cb77","permalink":"/authors/sarah/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/sarah/","section":"authors","summary":"I am an MPH candidate in Epidemiology and Biostatistics at Washington University in St. Louis with a background in Neuroscience and Genetics. I have experience in both psychiatric and chronic disease epidemiology, with particular emphases on eating disorders, diabetes, and comorbidity. I'm currently interested in the application of machine learning and big data to epidemiologic problems, as well as the development of new causal inference methods for big data. When I'm not in the lab or fiddling around in R, you can find me playing Settlers of Catan, running, cycling, or perfecting the art of latte making.","tags":null,"title":"Sarah Van Alsten, MPH","type":"authors"},{"authors":[],"categories":[],"content":"\rI’ve been a runner since middle school, and though I think it’s fair to say I peaked in college (after my single completed half marathon my pace and distance have diminished considerably), I’m trying to get back into running and biking more regularly. With that in mind, I started tracking my training on an app called Strava, which is pretty awesome- it provides you with splits, mileage, pace, and other metrics that might be useful in helping you adjust your training volume. Moreover, it fosters a bit of competitve spirit by comparing your performance on certain segments of a route to other frequent users.\nBut on to today’s topic. I was very excited to learn that someone had gone about creating a package that lets you work with Strava data in R, so here’s a gentle introduction.\nPart 1. Prerequisites\r1. Install/open up necessary packages. Note not all of them are on CRAN yet\rdevtools::install_github(\u0026#39;fawda123/rStrava\u0026#39;)\rdevtools::install_github(\u0026#39;dgrtwo/gganimate\u0026#39;)\rdevtools::install_github(\u0026#39;thomasp85/transformr\u0026#39;)\rlibrary(rStrava) library(httr)\rlibrary(gganimate) library(dplyr)\rlibrary(tidyr)\rlibrary(purrr)\rlibrary(sp)\rlibrary(ggmap)\rlibrary(raster)\rlibrary(mapproj)\r\r2. Sign up for a Strava account and create a personal Strava API\rIf you don’t have an account already, one can be created here. Once you sign up and log in, create the personal API by going here and selecting ‘Create and Manage Your App’. You’ll have to give your app a name (I just called mine ‘R’) and provide an image (I just posted a photo of myself), but then you should be all set. Additional details about the API are available here\nOnce you have that done, you need to set up an authentication token for the API in R. You can change the\rapp_scope and cache arguments, which deal with which activities you allow to be read in and whether to save the authentication token in your R history for future use. It’ll look like this:\r# Strava key\rapp_name \u0026lt;- \u0026#39;xxxx\u0026#39; #this is where I\u0026#39;d put \u0026#39;R\u0026#39;; title assigned by you\rapp_client_id \u0026lt;- \u0026#39;xxxxx\u0026#39; #something that Strava assigns to your app (2 in picture)\rapp_secret \u0026lt;- \u0026#39;\u0026quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026quot;\u0026#39; #also assigned by (3 in picture)\r# create authentication token\rstrava_token \u0026lt;- httr::config(token = strava_oauth(app_name, app_client_id, app_secret,\rapp_scope = \u0026quot;activity:read_all\u0026quot;,\rcache = TRUE))\r#in future sessions, load your token in like this after you\u0026#39;ve cached it\rstrava_token \u0026lt;- httr::config(token = readRDS(\u0026#39;.httr-oauth\u0026#39;)[[1]])\r\r3. Sign up for a Google Maps API.\rThis is also mainly free, although you have a limit on the number of requests you can put through.\rThe site to sign up is here. Follow the get started instructions, then, once you have it set up, find your unique API key by going to APIs -\u0026gt; Details of the elevation API -\u0026gt; Credentials\nNow, register that API key in R.\n# Google elevation API key\rGoogleAPI \u0026lt;- \u0026#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u0026#39;\r# save the key, do only once\rcat(\u0026quot;google_key=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\u0026quot;,\rfile=file.path(normalizePath(\u0026quot;~/\u0026quot;), \u0026quot;.Renviron\u0026quot;),\rappend=TRUE)\r# retrieve the key, restart R if not found\rmykey \u0026lt;- Sys.getenv(\u0026quot;google_key\u0026quot;)\rregister_google(mykey)\r\r\rPart 2. Mapping + rStrava Functions\rThe rStrava package lets you download 3 main types of data: data about the athlete (you), data about the activities you’ve done (runs, bikes, walks, etc.), and data about activity streams (essentially more detailed activity data).\nAthlete Data\rYou can get an athlete’s data by providing their unique Strava identifier to this function. You can find the identifier by going to Strava, finding the athlete (you) via the ‘atlethe’ page, then clicking in the web address bar. The numbers at the end of the web address are your ID. Note that depending on privacy settings, you may not be able to get data for every user, but you should be able to access data about yourself. Ordinarly, I just use this as a check that I’ve picked the right user to get activities for.\nme \u0026lt;- get_athlete(stoken = strava_token,\rid = \u0026#39;xxxxxxxx\u0026#39;)\rhead(me)\r\rActivity Data\rPerhaps more interestingly, you can also access the activities you’ve completed. You need two main functions, get_activity_list which downloads activities, and compile_activities which tidies them into a more user-friendly data frame.\nDepending on how frequently you’ve used Strava, you may only want to select a few recent activities, which is where the acts argument comes in. Here I’ve just picked my 20 most recent rides + runs, keeping only those with a recorded distance of 2 mi or greater. If you prefer to use the metric system, you can also specify units = \"metric\", which is the default.\n#get routes for yourself\rroutes \u0026lt;- get_activity_list(stoken = strava_token)\r#make those routes into a useable data frame\ract_data \u0026lt;- compile_activities(routes, acts = 1:20, units = \u0026quot;imperial\u0026quot;) %\u0026gt;% filter(distance \u0026gt; 2)\rTo see where you most commonly complete your activities, use get_heat_map.\nget_heat_map(routes, key = mykey, col = \u0026#39;darkgreen\u0026#39;, size = 2, distlab = F, f = 0.4)\rTo see the elevation of your activity, use get_elev_prof. It defaults to the most recent activity you’ve completed if you pass it the result of a get_activity_list, or several of the routes if you pass specify those IDs when you compile. You can also choose to map for a specific activity by specifying the ‘id’ argument in\rcompile_activities\n#most recent activity\rget_elev_prof(routes, key = mykey, units = \u0026#39;imperial\u0026#39;)\r#4 most recent activities w/ map data available\rget_activity_list(stoken = strava_token) %\u0026gt;%\rcompile_activities(1:4) %\u0026gt;%\rget_elev_prof(key = mykey)\r#activity w/ ID 3221699709\rget_activity_list(stoken = strava_token) %\u0026gt;%\rcompile_activities(id = \u0026#39;3221699709\u0026#39;) %\u0026gt;%\rget_elev_prof(key = mykey)\rYou can also add elevation and gradients to a heatmap.\n# plot % gradient along a single ride (no gradient)\rget_heat_map(routes, id = \u0026#39;3221699709\u0026#39;, alpha = 1, add_elev = T, f = 0.3,\rdistlab = F, as_grad = F, key = mykey, size = 2, col = \u0026#39;Spectral\u0026#39;, expand = 5, maptype = \u0026#39;satellite\u0026#39;, units = \u0026#39;imperial\u0026#39;)\r# plot % gradient along a single ride\rget_heat_map(routes, id = \u0026#39;3221699709\u0026#39;, alpha = 1, add_elev = T, f = 0.3,\rdistlab = F, as_grad = T, key = mykey, size = 2, col = \u0026#39;Spectral\u0026#39;, expand = 5, maptype = \u0026#39;satellite\u0026#39;, units = \u0026#39;imperial\u0026#39;)\rFinally, for split pace\n# plots for most recent activity\rplot_spdsplits(routes, stoken = strava_token, id = \u0026#39;3221699709\u0026#39;, units = \u0026#39;imperial\u0026#39;)\r\rStream Data\rFor even more information, you’ll probably want the activity streams. These add things like location, temperature, cadence, and more details about your pace and splits. For simplicity, I’m just picking one activity to look at.\nstream \u0026lt;- get_activity_streams(act_data = routes, stoken = strava_token,\rid = \u0026#39;3221699709\u0026#39;, units = \u0026quot;imperial\u0026quot;)\rstream \u0026lt;- get_activity_streams(act_data = routes, stoken = strava_token,\rid = \u0026#39;3221699709\u0026#39;, units = \u0026quot;imperial\u0026quot;)\rYou can plot streams using the same plotting functions as activity data (e.g. heat maps, speed splits). The output is essentially the same as for plotting activity data. Here, I’ve changed the heatmap to show speed instead of gradient.\n#plot speed on heat map\rget_heat_map(stream, alpha = 1, filltype = \u0026#39;speed\u0026#39;,\rf = 0.3, size = 2, col = \u0026#39;Spectral\u0026#39;, distlab = F)\r# stream splits\rplot_spdsplits(stream, stoken = strava_token, units = \u0026#39;imperial\u0026#39;)\r\rPart 3. Animate it.\rThe maps are pretty cool to visualize like this, but I wanted to see if I could make them even more fun and add some animation. You’ll need to use the streams data for this, since it incorporates location at specific times. Another thing to note here is you’ll get weird errors if any of the downloaded activity doesn’t have an associated stream- this happens if you have a manual upload or complete a stationary activity (such as strength training), for instance. The best workaround is to manually specify certain acts so it will skip over the unknown streamed activity.\n#download streams\rall.acts \u0026lt;- get_activity_list(stoken = strava_token) %\u0026gt;%\rget_activity_streams(stoken = strava_token, acts = 3:20)\r#filter to a single ride\rsingle_ride \u0026lt;- all.acts %\u0026gt;%\runnest(cols = names(all.acts)) %\u0026gt;%\rgroup_by(id) %\u0026gt;%\rfilter(id == 3373598662)\rMapping in R requires you to specify exactly where you want the map to focus. This is called a “bounding box” (bbox for short), and we can get Google API to do that for us with the combination of get_map and make_bbox. We pass it the latitude and longitude that are available in the streams, and it does the work for us.\n#create a background map base on which we will plot\rmap_base \u0026lt;- get_map(location = make_bbox(lng, lat,\rdata = single_ride,\rf = 0.1),\rsource = \u0026#39;google\u0026#39;, maptype = \u0026#39;terrain\u0026#39;)\rNext, we use that map as the base to trace out our route. We can color the path in any number of different ways - speed, elevation, grade, distance- I’ve chosen speed here. The coordinates again are our latitude and longitude. To animate the map, we use gganimate are reveal our data gradually over time. Then we can save the animation as a GIF.\n#make the animation of the single ride\rggmap(map_base) +\rgeom_path(aes(x = lng, y = lat, color = velocity_smooth), size = 2,\rdata = single_ride) +\rscale_color_distiller(\u0026#39;Speed\u0026#39;, palette = \u0026#39;Spectral\u0026#39;) +\rcoord_cartesian()+\rtheme_nothing() +\rggtitle(\u0026quot;Forest Park Ride\u0026quot;) +\rgganimate::transition_reveal(time)\r#save the animation as a GIF\rgganimate::anim_save(\u0026quot;strava_ride.gif\u0026quot;)\rWhat if we want to plot multiple rides? Actually, that’s pretty simple to do as well. Just add a group aesthetic to geom_path. To make it easier to see, I also colored by ride ID.\nall_rides \u0026lt;- all.acts %\u0026gt;%\runnest(cols = names(all.acts)) %\u0026gt;%\rgroup_by(id)\rggmap(map_base) +\rgeom_path(aes(x = lng, y = lat, color = factor(id), group = factor(id)), size = 2,\rdata = all_rides) +\rcoord_cartesian()+\rtheme_nothing() +\rggtitle(\u0026quot;Forest Park Ride\u0026quot;) +\rgganimate::transition_reveal(time)\r#save the animation as a GIF\rgganimate::anim_save(\u0026quot;strava_rides.gif\u0026quot;)\r\r\r","date":1588204800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1588285265,"objectID":"4b66426b968e43e9b2e8961d8cf184b8","permalink":"/post/strava/mapping-your-rides-with-rstrava/","publishdate":"2020-04-30T00:00:00Z","relpermalink":"/post/strava/mapping-your-rides-with-rstrava/","section":"post","summary":"I’ve been a runner since middle school, and though I think it’s fair to say I peaked in college (after my single completed half marathon my pace and distance have diminished considerably), I’m trying to get back into running and biking more regularly. With that in mind, I started tracking my training on an app called Strava, which is pretty awesome- it provides you with splits, mileage, pace, and other metrics that might be useful in helping you adjust your training volume.","tags":[],"title":"Mapping Your Rides With rStrava","type":"post"},{"authors":null,"categories":null,"content":"One of my favorite things about R is the plethora of add-ons and extras that can make organizing, editing, and running code easier. Of course, that can come with drawbacks - a friend commented that they didn't like R \u0026quot;because there's always 20 ways to do the same thing!\u0026quot; Of course, that's exactly WHY I like it, so here's a short list of my favorite extras/functions/tips and tricks that will make your life easier. Note that these are all WINDOWS shortcuts, Mac OS has different options.\nFinding, Replacing, and Navigating.\n Just like in Word, PDFs, or webpages, you can search and locate specific instances of text with Ctrl-F. If you already have a piece of text highlighted when you do this, the 'find' will autopopulate with that piece, saving you the trouble of retyping. You can also choose to limit your search to text in the same case, or search by regular expressions.\nReplace comes up in the same 'find' taskbar. If you've highlighted a portion of code, you can easily replace all instances just in that snippet by checking 'in selection' and then then hitting the 'all' button. This can be really handy if you're doing the same set of tasks on many objects with different names and need to be sure you've changed all the named instances.\nAnother useful way to organize code is using Ctrl-Shift-M. This will bring up a dialog box in which you can type the main purpose of the code or part of the document you're working on, like 'Import Data' or 'Run Logistic Regression'. Then, use Ctrl-PgUp or Ctrl-PgDn to easily navigate directly to previous or later sections.\nOne more: navigating the cursor to the beginning (Home) or end (End) of line.\nSelection\n To highlight the entire current line: Ctrl-Shift-L. To highlight all code to a matching parenthes or bracket, use Ctrl-Shift-Alt-E. To select all code from current to start/end, use Ctrl+Shift+Home/End or Shift+Alt+Up/Down\nRunning Code\n To run current line (or whatever is in your highlight snippet), Ctrl-Enter. You can also go up to the 'code' tab, then select 'run selected line' but I find it's faster to do via keyboard. To run the whole document up to your current cursor, use Ctrl-Alt-B, or from current line to then end use Ctrl-Alt-E.\nCommenting\n I comment out lines frequently. Ctrl-Shift-C will comment out the current line or selection.\nKnitting\n If using RMarkdown, knit the document with Ctrl-Shift-K.\nInserting Helpful Operators\n The pipe operator, %\u0026gt;%, is a useful function built in the magittr package. Insert one with Ctrl-Shift-M. Also, in R the assignment operator, \u0026lt;- , can be inserted with Alt- - (that's alt and the minus key).\nThese are NOT the only available shortcuts, for a more complete list see this cheatsheet . You can also create/customize your own personal shortcuts by going to 'Tools' --\u0026gt; 'Modify Keyboard Shortcuts'.\nDid you find this page helpful? Consider sharing it 🙌 ","date":1578873600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578873600,"objectID":"9dbf29ba2816ccdd221fec88407052ca","permalink":"/post/rstudio-tips/","publishdate":"2020-01-13T00:00:00Z","relpermalink":"/post/rstudio-tips/","section":"post","summary":"One of my favorite things about R is the plethora of add-ons and extras that can make organizing, editing, and running code easier. Of course, that can come with drawbacks - a friend commented that they didn't like R \u0026quot;because there's always 20 ways to do the same thing!\u0026quot; Of course, that's exactly WHY I like it, so here's a short list of my favorite extras/functions/tips and tricks that will make your life easier.","tags":null,"title":"My Favorite Shortcuts and Tricks in RStudio","type":"post"},{"authors":["Karishma Furtado, Alexis Duncan, Jen Kocher, Pranav Nandan"],"categories":null,"content":" ","date":1578441600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1578441600,"objectID":"b577cb249d96de8ccf9bf4d47d3a32d8","permalink":"/publication/furtado/","publishdate":"2019-09-01T00:00:00Z","relpermalink":"/publication/furtado/","section":"publication","summary":"Black male students with disabilities face markedly higher rates of out of school suspension than do other students, and addressing this disparity may improve educational outcomes.","tags":["Citation","Gender","Social science"],"title":"Falling Through the Cracks Disparities in Out-of-School Suspension in St. Louis at the Intersection of Race, Disability, and Gender","type":"publication"}]