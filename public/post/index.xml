<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Sarah Van Alsten</title>
    <link>/post/</link>
      <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sat, 02 May 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>Posts</title>
      <link>/post/</link>
    </image>
    
    <item>
      <title>Rendering Audio &#43; Animations in R</title>
      <link>/post/rendering-audio-animations-in-r/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      <guid>/post/rendering-audio-animations-in-r/</guid>
      <description>


&lt;p&gt;Today I’ll give a brief introduction as to how to create simple audio/music files in R without relying on importation from other software or downloads from APIs. Of course, you won’t be able to use voice-overs or words, but it’s still quite empowering to know how.&lt;/p&gt;
&lt;div id=&#34;step-1.-installopen-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 1. Install/open packages&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr) #for data management&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;dplyr&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:stats&amp;#39;:
## 
##     filter, lag&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:base&amp;#39;:
## 
##     intersect, setdiff, setequal, union&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(audio) #for rendering audio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;audio&amp;#39; was built under R version 3.6.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2) #for plot&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;ggplot2&amp;#39; was built under R version 3.6.3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gganimate) #to animate&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;gganimate&amp;#39; was built under R version 3.6.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Due to &lt;strong&gt;potential&lt;/strong&gt; copyright issues, I’ll demonstrate using two songs available in the public domain: “Happy Birthday to You” and “Victors” (the University of Michigan fightsong. Go Blue!). The first is shorter and simpler, so we’ll start there.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;step-2.-make-music&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 2. Make music&lt;/h2&gt;
&lt;p&gt;All you really need to know to recreate any song are 1) the notes (e.g. A#, B, C) and 2) the duration each note is played (e.g. eighth-note, quarter note). You can find these on sheet music, though they will have to be transcribed by hand [at least as far as I know. If you have a way to work with sheet music I’d love to hear it]. First, we assign each note letter a numeric value, then specify what the notes (pitch) are and the duration (duration) each is played. Then bind together in a data frame.
Note that we assume we’re generally in the 4th octave unless otherwise specifed by a 5 appended to the end of a letter.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;notes &amp;lt;- c(A = 0, B = 2, C = 3, D = 5, E = 7, F = 8, G = 10)

pitch &amp;lt;- &amp;quot;D D E D G F# D D E D A G D D D5 B G F# E C5 C5 B G A G&amp;quot;

duration &amp;lt;- c(rep(c(0.75, 0.25, 1, 1, 1, 2), 2),
              0.75, 0.25, 1, 1, 1, 1, 1, 0.75, 0.25, 1, 1, 1, 2)

bday &amp;lt;- tibble(pitch = strsplit(pitch, &amp;quot; &amp;quot;)[[1]],
                   duration = duration)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have to make these come to life as actual sound waves. You can read more about wave properties &lt;a href=&#34;http://digitalsoundandmusic.com/2-1-2-properties-of-sine-waves/&#34;&gt;here&lt;/a&gt;, but for now just recognize that we have to translate the pitch into a frequency, which we will then later use to create a sine wave for playing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bday &amp;lt;- bday %&amp;gt;%
  #if we added a &amp;#39;5&amp;#39; for 5th octave, it will have more characters- thus, find octave like this
  mutate(octave = substring(pitch, nchar(pitch)) %&amp;gt;%
           {suppressWarnings(as.numeric(.))} %&amp;gt;%
           ifelse(is.na(.), 4, .),
      #get actually string value of the note
         note = notes[substr(pitch, 1, 1)],
      #add 1 if it&amp;#39;s a sharp (half-step up) or subtract 1 if it&amp;#39;s a flat (b) 
         note = note + grepl(&amp;quot;#&amp;quot;, pitch) -
           grepl(&amp;quot;b&amp;quot;, pitch) + octave * 12 +
           12 * (note &amp;lt; 3),
      #translate into frequency
         freq = 2 ^ ((note - 60) / 12) * 440)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we can play with how fast and high pitched we want to play the song at. There’s no exact science here- play around with whatever ends up sounding good. The tempo and sampling rate then control the properties of the sine wave.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#set a speed to play at
tempo &amp;lt;- 120

#set sampling rate (this controls how high pitched i)
sample_rate &amp;lt;- 44100

#function to create a sine wave
make_sine &amp;lt;- function(freq, duration) {
  wave &amp;lt;- sin(seq(0, duration / tempo * 60, 1 / sample_rate) *
                freq * 2 * pi)
  fade &amp;lt;- seq(0, 1, 50 / sample_rate)
  wave * c(fade, rep(1, length(wave) - 2 * length(fade)), rev(fade))
}

#translate pitches into sine waves
bday_wave &amp;lt;-
  mapply(make_sine, bday$freq, bday$duration) %&amp;gt;%
  do.call(&amp;quot;c&amp;quot;, .)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, play the music.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;play(bday_wave)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to save your audio file, you can do so with the &lt;code&gt;save.wave&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;save.wave(bday_wave, &amp;quot;bday.wav&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;more-complicated-music&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More Complicated Music&lt;/h2&gt;
&lt;p&gt;One component that isn’t easily addressed by the above operations is rests- the period when there is a short break between notes. My go-to workaround has been to create several separate smaller strings of audio, split at the places where a rest would be, then play them all together at the end with a specified &lt;code&gt;Sys.sleep()&lt;/code&gt; time to time the playback correctly. Again, it’s not entirely feasible when you have a lot of rests or a long piece of music, but it works for smaller jobs.&lt;/p&gt;
&lt;p&gt;Here’s ‘Hail to the Victors’&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Notice I adjusted these a bit from before. You can play with spacing to get different
#sounds out of your notes, just be sure to preserve the general alphabetical order
notes &amp;lt;- c(A = 0, B = 2, C = 3, D = 5, E = 7, F = 8, G = 9)

pitch2 &amp;lt;- &amp;quot;C A B C A B C D B C D B C D E F F C C D A B C B A E&amp;quot;
pitch3 &amp;lt;- &amp;quot;C A B C A B C D B C D B C D E F F C C D A B C E C B A&amp;quot;
duration2 &amp;lt;- c(4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4, 3, .5, .5, 2, 2, 2, 2, 4, 2, 2, 5)
duration3 &amp;lt;- c(4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 4, 3, .5, .5, 2, 2, 2, 2, 2, 2, 3, 1, 5)
position &amp;lt;- 1:length(pitch2)
position2 &amp;lt;- 1:length(pitch3)

song1 &amp;lt;- tibble(pitch2 = strsplit(pitch2, &amp;quot; &amp;quot;)[[1]],
               duration = duration2,
               position = position)
song2 &amp;lt;- tibble(pitch3 = strsplit(pitch3, &amp;quot; &amp;quot;)[[1]],
                duration = duration3,
                position = position2)

#instead of specifying sharps or flats in the above, I found the positions that should have
#been flat and adjusted them accordingly.
song1 &amp;lt;-
  song1 %&amp;gt;%
  mutate(octave = substring(pitch2, nchar(pitch2)) %&amp;gt;%
           {suppressWarnings(as.numeric(.))} %&amp;gt;%
           ifelse(is.na(.), 4, .),
         note = notes[substr(pitch2, 1, 1)],
         note = note + grepl(&amp;quot;#&amp;quot;, pitch2) -
           grepl(&amp;quot;b&amp;quot;, pitch2) + octave * 13 +
           ifelse(position %in% c(10, 11, 12, 33, 34, 35, 42), 1, 0) * -12,
         freq = 2 ^ ((note - 60) / 12) * 440)

song2 &amp;lt;-
  song2 %&amp;gt;%
  mutate(octave = substring(pitch3, nchar(pitch3)) %&amp;gt;%
           {suppressWarnings(as.numeric(.))} %&amp;gt;%
           ifelse(is.na(.), 4, .),
         note = notes[substr(pitch3, 1, 1)],
         note = note + grepl(&amp;quot;#&amp;quot;, pitch3) -
           grepl(&amp;quot;b&amp;quot;, pitch3) + octave * 13 +
           ifelse(position %in% c(10, 11, 12, 33, 34, 35, 42), 1, 0) * -12,
         freq = 2 ^ ((note - 60) / 12) * 440)

######################
#And last but not least!
tempo &amp;lt;- 230
sample_rate &amp;lt;- 44100

song_wave &amp;lt;-
  mapply(make_sine, song1$freq, song1$duration) %&amp;gt;%
  do.call(&amp;quot;c&amp;quot;, .)
song_wave2 &amp;lt;-
  mapply(make_sine, song2$freq, song2$duration) %&amp;gt;%
  do.call(&amp;quot;c&amp;quot;, .)

#highlight and run this code block all at once!
play(song_wave)
Sys.sleep(16)
play(song_wave2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;step-3.-animations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Step 3. Animations&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;gganimate&lt;/code&gt; package does all the heavy legwork here, so I can claim no credit. The package has too many functions and ways to play around with for me to get into everything, but I’ll cover one use case below. More info and examples can be found at the GitHub repo &lt;a href=&#34;https://github.com/thomasp85/gganimate&#34;&gt;here&lt;/a&gt; or the &lt;a href=&#34;https://cran.r-project.org/web/packages/gganimate/vignettes/gganimate.html&#34;&gt;vignette&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, load in the built in &lt;code&gt;mtcars&lt;/code&gt; dataset&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(&amp;quot;mtcars&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, plot a colored boxplot with ggplot. I’ve also changed the theme a bit to have a dark background and gotten rid of the legend so we’re not really interested in what the data has to say right now.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#boxplot
p &amp;lt;- ggplot(mtcars, aes(factor(cyl), mpg, fill = factor(cyl))) + 
  geom_boxplot() + 
  #flip so they go left and right instead of up and down
  coord_flip() +
  #make the theme dark + hide legend
  labs(x = &amp;quot;&amp;quot;, y = &amp;quot;&amp;quot;) + 
  theme_void() + theme(legend.position = &amp;quot;none&amp;quot;,
                      panel.background = element_rect(fill = &amp;quot;black&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have to give the plot some parameter on which to transition through - it can be something you’ve already included in the static plot of a different dimension entirely. I selected &lt;code&gt;gear&lt;/code&gt; to be transitioned over, meaning that the boxplot will get rendered as above for one gear type, then gets rerendered for the next gear type in real time. The &lt;code&gt;transition_length&lt;/code&gt; controls how quickly the plot shifts, while &lt;code&gt;state_length&lt;/code&gt; controls how long it stays static after transitioning. &lt;code&gt;enter_fade&lt;/code&gt; and &lt;code&gt;exit_shrink&lt;/code&gt; control how the boxplots move as they transition and the &lt;code&gt;ease_aes&lt;/code&gt; guides how to interpolate between plots as they transtion.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#animation
p + transition_states(gear, transition_length = 2, state_length = 1) +
  enter_fade() + 
  exit_shrink() +
  ease_aes(&amp;#39;sine-in-out&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-05-02-rendering-audio-animations-in-r_files/figure-html/unnamed-chunk-10-1.gif&#34; /&gt;&lt;!-- --&gt;&lt;/p&gt;
&lt;p&gt;You can safe your animation in GIF format if you like. It defaults to the most recent animation, or you specify the plot manually.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#save the animation as a GIF
gganimate::anim_save(&amp;quot;boxplot.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I want to play music along with the plot, I typically render the animation first, then start the audio. It’s still a work in progress to try and do both in one fell swoop, but hopefully this gets you started with the fun stuff!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Mapping Your Rides With rStrava</title>
      <link>/post/strava/mapping-your-rides-with-rstrava/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <guid>/post/strava/mapping-your-rides-with-rstrava/</guid>
      <description>


&lt;p&gt;I’ve been a runner since middle school, and though I think it’s fair to say I peaked in college (after my single completed half marathon my pace and distance have diminished considerably), I’m trying to get back into running and biking more regularly. With that in mind, I started tracking my training on an app called Strava, which is pretty awesome- it provides you with splits, mileage, pace, and other metrics that might be useful in helping you adjust your training volume. Moreover, it fosters a bit of competitve spirit by comparing your performance on certain segments of a route to other frequent users.&lt;/p&gt;
&lt;p&gt;But on to today’s topic. I was very excited to learn that someone had gone about creating a package that lets you work with Strava data in R, so here’s a gentle introduction.&lt;/p&gt;
&lt;div id=&#34;part-1.-prerequisites&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part 1. Prerequisites&lt;/h1&gt;
&lt;div id=&#34;installopen-up-necessary-packages.-note-not-all-of-them-are-on-cran-yet&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;1. Install/open up necessary packages. Note not all of them are on CRAN yet&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;devtools::install_github(&amp;#39;fawda123/rStrava&amp;#39;)
devtools::install_github(&amp;#39;dgrtwo/gganimate&amp;#39;)
devtools::install_github(&amp;#39;thomasp85/transformr&amp;#39;)

library(rStrava) 
library(httr)
library(gganimate)  
library(dplyr)
library(tidyr)
library(purrr)
library(sp)
library(ggmap)
library(raster)
library(mapproj)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sign-up-for-a-strava-account-and-create-a-personal-strava-api&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;2. Sign up for a Strava account and create a personal Strava API&lt;/h2&gt;
&lt;p&gt;If you don’t have an account already, one can be created &lt;a href=&#34;https://www.strava.com/&#34;&gt;here&lt;/a&gt;. Once you sign up and log in, create the personal API by going &lt;a href=&#34;https://developers.strava.com/&#34;&gt;here&lt;/a&gt; and selecting ‘Create and Manage Your App’. You’ll have to give your app a name (I just called mine ‘R’) and provide an image (I just posted a photo of myself), but then you should be all set. &lt;a href=&#34;https://developers.strava.com/docs/getting-started/&#34;&gt;Additional details about the API are available here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you have that done, you need to set up an authentication token for the API in R. You can change the
&lt;code&gt;app_scope&lt;/code&gt; and &lt;code&gt;cache&lt;/code&gt; arguments, which deal with which activities you allow to be read in and whether to save the authentication token in your R history for future use. It’ll look like this:
&lt;img src=&#34;\img\rstrava.PNG&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Strava key
app_name &amp;lt;- &amp;#39;xxxx&amp;#39; #this is where I&amp;#39;d put &amp;#39;R&amp;#39;; title assigned by you
app_client_id &amp;lt;- &amp;#39;xxxxx&amp;#39; #something that Strava assigns to your app (2 in picture)
app_secret &amp;lt;- &amp;#39;&amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;&amp;#39; #also assigned by  (3 in picture)

# create authentication token
strava_token &amp;lt;- httr::config(token = strava_oauth(app_name, app_client_id, app_secret,
                                                  app_scope = &amp;quot;activity:read_all&amp;quot;,
                                                  cache = TRUE))

#in future sessions, load your token in like this after you&amp;#39;ve cached it
strava_token &amp;lt;- httr::config(token = readRDS(&amp;#39;.httr-oauth&amp;#39;)[[1]])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sign-up-for-a-google-maps-api.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;3. Sign up for a Google Maps API.&lt;/h2&gt;
&lt;p&gt;This is also mainly free, although you have a limit on the number of requests you can put through.
The site to sign up is &lt;a href=&#34;https://developers.google.com/maps/documentation/javascript/get-api-key&#34;&gt;here&lt;/a&gt;. Follow the get started instructions, then, once you have it set up, find your unique API key by going to APIs -&amp;gt; Details of the elevation API -&amp;gt; Credentials&lt;/p&gt;
&lt;p&gt;Now, register that API key in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Google elevation API key
GoogleAPI &amp;lt;- &amp;#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&amp;#39;

# save the key, do only once
cat(&amp;quot;google_key=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n&amp;quot;,
    file=file.path(normalizePath(&amp;quot;~/&amp;quot;), &amp;quot;.Renviron&amp;quot;),
    append=TRUE)

# retrieve the key, restart R if not found
mykey &amp;lt;- Sys.getenv(&amp;quot;google_key&amp;quot;)
register_google(mykey)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-2.-mapping-rstrava-functions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part 2. Mapping + rStrava Functions&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;rStrava&lt;/code&gt; package lets you download 3 main types of data: data about the athlete (you), data about the activities you’ve done (runs, bikes, walks, etc.), and data about activity streams (essentially more detailed activity data).&lt;/p&gt;
&lt;div id=&#34;athlete-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Athlete Data&lt;/h2&gt;
&lt;p&gt;You can get an athlete’s data by providing their unique Strava identifier to this function. You can find the identifier by going to Strava, finding the athlete (you) via the ‘atlethe’ page, then clicking in the web address bar. The numbers at the end of the web address are your ID. Note that depending on privacy settings, you may not be able to get data for every user, but you should be able to access data about yourself. Ordinarly, I just use this as a check that I’ve picked the right user to get activities for.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;me &amp;lt;- get_athlete(stoken = strava_token,
                     id = &amp;#39;xxxxxxxx&amp;#39;)

head(me)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;activity-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Activity Data&lt;/h2&gt;
&lt;p&gt;Perhaps more interestingly, you can also access the activities you’ve completed. You need two main functions, &lt;code&gt;get_activity_list&lt;/code&gt; which downloads activities, and &lt;code&gt;compile_activities&lt;/code&gt; which tidies them into a more user-friendly data frame.&lt;/p&gt;
&lt;p&gt;Depending on how frequently you’ve used Strava, you may only want to select a few recent activities, which is where the &lt;code&gt;acts&lt;/code&gt; argument comes in. Here I’ve just picked my 20 most recent rides + runs, keeping only those with a recorded distance of 2 mi or greater. If you prefer to use the metric system, you can also specify &lt;code&gt;units = &#34;metric&#34;&lt;/code&gt;, which is the default.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#get routes for yourself
routes &amp;lt;- get_activity_list(stoken = strava_token)

#make those routes into a useable data frame
act_data &amp;lt;- compile_activities(routes, acts = 1:20, units = &amp;quot;imperial&amp;quot;) %&amp;gt;% 
  filter(distance &amp;gt; 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see where you most commonly complete your activities, use &lt;code&gt;get_heat_map&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_heat_map(routes, key = mykey, col = &amp;#39;darkgreen&amp;#39;, size = 2, distlab = F, f = 0.4)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;\img\get_heat_map.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To see the elevation of your activity, use &lt;code&gt;get_elev_prof&lt;/code&gt;. It defaults to the most recent activity you’ve completed if you pass it the result of a &lt;code&gt;get_activity_list&lt;/code&gt;, or several of the routes if you pass specify those IDs when you compile. You can also choose to map for a specific activity by specifying the ‘id’ argument in
&lt;code&gt;compile_activities&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#most recent activity
get_elev_prof(routes, key = mykey, units = &amp;#39;imperial&amp;#39;)


#4 most recent activities w/ map data available
get_activity_list(stoken = strava_token) %&amp;gt;%
  compile_activities(1:4) %&amp;gt;%
  get_elev_prof(key = mykey)


#activity w/ ID 3221699709
get_activity_list(stoken = strava_token) %&amp;gt;%
  compile_activities(id = &amp;#39;3221699709&amp;#39;) %&amp;gt;%
  get_elev_prof(key = mykey)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;\img\elev_prof1.PNG&#34; /&gt;
&lt;img src=&#34;\img\elev_prof2.PNG&#34; /&gt;
&lt;img src=&#34;\img\elev_prof3.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also add elevation and gradients to a heatmap.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot % gradient along a single ride (no gradient)
get_heat_map(routes, id = &amp;#39;3221699709&amp;#39;, alpha = 1, add_elev = T, f = 0.3,
             distlab = F, as_grad = F, key = mykey, size = 2, 
             col = &amp;#39;Spectral&amp;#39;, expand = 5, maptype = &amp;#39;satellite&amp;#39;, units = &amp;#39;imperial&amp;#39;)

# plot % gradient along a single ride
get_heat_map(routes, id = &amp;#39;3221699709&amp;#39;, alpha = 1, add_elev = T, f = 0.3,
             distlab = F, as_grad = T, key = mykey, size = 2, 
             col = &amp;#39;Spectral&amp;#39;, expand = 5, maptype = &amp;#39;satellite&amp;#39;, units = &amp;#39;imperial&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;\img\elev_heatmap.PNG&#34; /&gt;
&lt;img src=&#34;\img\grad_heatmap.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Finally, for split pace&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plots for most recent activity
plot_spdsplits(routes, stoken = strava_token, id = &amp;#39;3221699709&amp;#39;, units = &amp;#39;imperial&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;\img\speed_split.PNG&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;stream-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stream Data&lt;/h2&gt;
&lt;p&gt;For even more information, you’ll probably want the activity streams. These add things like location, temperature, cadence, and more details about your pace and splits. For simplicity, I’m just picking one activity to look at.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stream &amp;lt;- get_activity_streams(act_data = routes, stoken = strava_token,
                               id = &amp;#39;3221699709&amp;#39;, units = &amp;quot;imperial&amp;quot;)


stream &amp;lt;- get_activity_streams(act_data = routes, stoken = strava_token,
                               id = &amp;#39;3221699709&amp;#39;, units = &amp;quot;imperial&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can plot streams using the same plotting functions as activity data (e.g. heat maps, speed splits). The output is essentially the same as for plotting activity data. Here, I’ve changed the heatmap to show speed instead of gradient.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#plot speed on heat map
get_heat_map(stream, alpha = 1, filltype = &amp;#39;speed&amp;#39;,
             f = 0.3, size = 2, col = &amp;#39;Spectral&amp;#39;, distlab = F)


# stream splits
plot_spdsplits(stream, stoken = strava_token, units = &amp;#39;imperial&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;\img\speed_heatmap.PNG&#34; /&gt;
&lt;img src=&#34;\img\speed_split.PNG&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-3.-animate-it.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part 3. Animate it.&lt;/h2&gt;
&lt;p&gt;The maps are pretty cool to visualize like this, but I wanted to see if I could make them even more fun and add some animation. You’ll need to use the streams data for this, since it incorporates location at specific times. Another thing to note here is you’ll get weird errors if any of the downloaded activity doesn’t have an associated stream- this happens if you have a manual upload or complete a stationary activity (such as strength training), for instance. The best workaround is to manually specify certain &lt;code&gt;acts&lt;/code&gt; so it will skip over the unknown streamed activity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#download streams
all.acts &amp;lt;- 
  get_activity_list(stoken = strava_token) %&amp;gt;%
  get_activity_streams(stoken = strava_token, acts = 3:20)

#filter to a single ride
single_ride &amp;lt;- all.acts %&amp;gt;%
  unnest(cols = names(all.acts)) %&amp;gt;%
  group_by(id) %&amp;gt;%
  filter(id == 3373598662)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mapping in R requires you to specify exactly where you want the map to focus. This is called a “bounding box” (bbox for short), and we can get Google API to do that for us with the combination of &lt;code&gt;get_map&lt;/code&gt; and &lt;code&gt;make_bbox&lt;/code&gt;. We pass it the latitude and longitude that are available in the streams, and it does the work for us.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#create a background map base on which we will plot
map_base &amp;lt;- get_map(location = make_bbox(lng, lat,
                                         data = single_ride,
                                         f = 0.1),
                    source = &amp;#39;google&amp;#39;, maptype = &amp;#39;terrain&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, we use that map as the base to trace out our route. We can color the path in any number of different ways - speed, elevation, grade, distance- I’ve chosen speed here. The coordinates again are our latitude and longitude. To animate the map, we use &lt;code&gt;gganimate&lt;/code&gt; are reveal our data gradually over time. Then we can save the animation as a GIF.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#make the animation of the single ride
ggmap(map_base) +
  geom_path(aes(x = lng, y = lat, color = velocity_smooth), size = 2,
            data = single_ride) +
  scale_color_distiller(&amp;#39;Speed&amp;#39;, palette = &amp;#39;Spectral&amp;#39;) +
  coord_cartesian()+
  theme_nothing() +
  ggtitle(&amp;quot;Forest Park Ride&amp;quot;) +
  gganimate::transition_reveal(time)

#save the animation as a GIF
gganimate::anim_save(&amp;quot;strava_ride.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;\img\strava_ride.gif&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What if we want to plot multiple rides? Actually, that’s pretty simple to do as well. Just add a group aesthetic to &lt;code&gt;geom_path&lt;/code&gt;. To make it easier to see, I also colored by ride ID.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all_rides &amp;lt;- all.acts %&amp;gt;%
  unnest(cols = names(all.acts)) %&amp;gt;%
  group_by(id)

ggmap(map_base) +
  geom_path(aes(x = lng, y = lat, color = factor(id), group = factor(id)), size = 2,
            data = all_rides) +
  coord_cartesian()+
  theme_nothing() +
  ggtitle(&amp;quot;Forest Park Ride&amp;quot;) +
  gganimate::transition_reveal(time)

#save the animation as a GIF
gganimate::anim_save(&amp;quot;strava_rides.gif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;\img\strava_rides.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My Favorite Shortcuts and Tricks in RStudio</title>
      <link>/post/rstudio-tips/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/rstudio-tips/</guid>
      <description>&lt;p&gt;One of my favorite things about R is the plethora of add-ons and extras that can make organizing, editing, and running code easier. Of course, that can come with drawbacks - a friend commented that they didn&#39;t like R &amp;quot;because there&#39;s always 20 ways to do the same thing!&amp;quot; Of course, that&#39;s exactly WHY I like it, so here&#39;s a short list of my favorite extras/functions/tips and tricks that will make your life easier. Note that these are all &lt;strong&gt;WINDOWS&lt;/strong&gt; shortcuts, Mac OS has different options.&lt;/p&gt;

&lt;h3 id=&#34;finding-replacing-and-navigatingbr&#34;&gt;Finding, Replacing, and Navigating.&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;Just like in Word, PDFs, or webpages, you can search and locate specific instances of text with &lt;strong&gt;Ctrl-F&lt;/strong&gt;. If you already have a piece of text highlighted when you do this, the &#39;find&#39; will autopopulate with that piece, saving you the trouble of retyping. You can also choose to limit your search to text in the same case, or search by regular expressions.&lt;/p&gt;

&lt;p&gt;Replace comes up in the same &#39;find&#39; taskbar. If you&#39;ve highlighted a portion of code, you can easily replace all instances just in that snippet by checking &#39;in selection&#39; and then then hitting the &#39;all&#39; button. This can be really handy if you&#39;re doing the same set of tasks on many objects with different names and need to be sure you&#39;ve changed all the named instances.&lt;/p&gt;

&lt;p&gt;Another useful way to organize code is using &lt;strong&gt;Ctrl-Shift-M&lt;/strong&gt;. This will bring up a dialog box in which you can type the main purpose of the code or part of the document you&#39;re working on, like &#39;Import Data&#39; or &#39;Run Logistic Regression&#39;. Then, use &lt;strong&gt;Ctrl-PgUp&lt;/strong&gt; or &lt;strong&gt;Ctrl-PgDn&lt;/strong&gt; to easily navigate directly to previous or later sections.&lt;/p&gt;

&lt;p&gt;One more: navigating the cursor to the beginning (&lt;strong&gt;Home&lt;/strong&gt;) or end (&lt;strong&gt;End&lt;/strong&gt;) of line.&lt;/p&gt;

&lt;h3 id=&#34;selectionbr&#34;&gt;Selection&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;To highlight the entire current line: &lt;strong&gt;Ctrl-Shift-L&lt;/strong&gt;.
To highlight all code to a matching parenthes or bracket, use &lt;strong&gt;Ctrl-Shift-Alt-E&lt;/strong&gt;.
To select all code from current to start/end, use &lt;strong&gt;Ctrl+Shift+Home/End&lt;/strong&gt; or &lt;strong&gt;Shift+Alt+Up/Down&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;running-codebr&#34;&gt;Running Code&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;To run current line (or whatever is in your highlight snippet), &lt;strong&gt;Ctrl-Enter&lt;/strong&gt;. You can also go up to the &#39;code&#39; tab, then select &#39;run selected line&#39; but I find it&#39;s faster to do via keyboard. To run the whole document up to your current cursor, use &lt;strong&gt;Ctrl-Alt-B&lt;/strong&gt;, or from current line to then end use &lt;strong&gt;Ctrl-Alt-E&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;commentingbr&#34;&gt;Commenting&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;I comment out lines frequently. &lt;strong&gt;Ctrl-Shift-C&lt;/strong&gt; will comment out the current line or selection.&lt;/p&gt;

&lt;h3 id=&#34;knittingbr&#34;&gt;Knitting&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;If using RMarkdown, knit the document with &lt;strong&gt;Ctrl-Shift-K&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;inserting-helpful-operatorsbr&#34;&gt;Inserting Helpful Operators&lt;br&gt;&lt;/h3&gt;

&lt;p&gt;The pipe operator, %&amp;gt;%, is a useful function built in the magittr package. Insert one with &lt;strong&gt;Ctrl-Shift-M&lt;/strong&gt;. Also, in R the assignment operator, &amp;lt;- , can be inserted with &lt;strong&gt;Alt- -&lt;/strong&gt; (that&#39;s alt and the minus key).&lt;/p&gt;

&lt;p&gt;These are NOT the only available shortcuts, for a more complete list see this &lt;a href=&#34;https://rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf&#34;&gt;cheatsheet&lt;/a&gt; . You can also create/customize your own personal shortcuts by going to &#39;Tools&#39; --&amp;gt; &#39;Modify Keyboard Shortcuts&#39;.&lt;/p&gt;

&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
